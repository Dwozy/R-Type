name: Actions

on:
  repository_dispatch:
  push:
    branches:
    - 'main'
  pull_request:
    branches:
    - 'main'

env:
  MIRROR_URL: git@github.com:EpitechPromo2026/B-CPP-500-PAR-5-1-rtype-timothe.zheng.git
  WINDOWS_ARCH: windows-x86-64
  LINUX_ARCH: linux-x86-64

permissions:
  contents: read
  checks: write

jobs:
  check_program_compilation:
    if: success()
    strategy:
      max-parallel: 2
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            install_cmd: ./build_unix.sh
            container: biozzzzz/r-type
            executables: server/r-type_server,R-Type/r-type_client
          - os: windows-latest
            install_cmd: cmd /c build_win.bat
            executables: server\r-type_server.exe,R-Type\r-type_client.exe
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    name: check_program_compilation
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Build
        run: ${{ matrix.install_cmd }}
        timeout-minutes: 10

      - name: Clean build files
        run: ${{ matrix.install_cmd }} clean

      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "${{ matrix.executables }}"
          fail: true

  check_style:
    needs: [check_program_compilation]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install clang-format
        run: sudo apt-get install -y clang-format

      - name: Run linters
        uses: wearerequired/lint-action@v2
        with:
          clang_format: true
          continue_on_error: false

  run_tests:
    if: success()
    needs: [check_program_compilation]
    strategy:
      max-parallel: 2
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            install_cmd: ./build_unix.sh
            container: biozzzzz/r-type
            executables: $ {{ env.EXECUTABLES_UNIX }}
          - os: windows-latest
            install_cmd: cmd /c build_win.bat
            executables: $ {{ env.EXECUTABLES_WIN }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    name: run_tests
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      # TODO

  push_to_mirror:
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [run_tests, check_style]
    runs-on: ubuntu-latest
    name: push_to_mirror
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}

  make_deploy_doxygen:
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [run_tests, check_style]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v2
      - name: Install doxygen
        run: sudo apt-get update; sudo apt-get install -y doxygen
      - name: Create the doxygen
        run: doxygen Doxyfile
      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./html

  create_release:
    if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [run_tests, check_style]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  add_release_assets:
    if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: create_release
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, windows-latest]
        category: [client, server]
        include:
          - os: ubuntu-latest
            cmd:
            arch: ${{ LINUX_ARCH }}
            container: biozzzzz/r-type
          - os: windows-latest
            cmd:
            arch: ${{ WINDOWS_ARCH }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build artifact
        run: ${{ matrix.cmd }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./artifacts/r-type_${{ matrix.category }}_${{ matrix.arch }}.zip
          asset_name: r-type_${{ matrix.category }}_${{ matrix.arch }}
