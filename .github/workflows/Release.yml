name: Release

on:
  repository_dispatch:
  push:
    tags:
    - v*

permissions:
  contents: write
  checks: write

  create_release:
    if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: create_artifact
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  add_release_assets:
    if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: create_release
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, windows-latest]
        category: [client, server, platformer, game_engine]
        include:
          - os: ubuntu-latest
            cmd: ./build_artifact.sh
            arch: linux_x86-64
            container: biozzzzz/r-type
          - os: windows-latest
            cmd: cmd /c build_artifact.bat
            arch: windows_x86-64
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build artifact
        run: ${{ matrix.cmd }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./artifacts/r-type_${{ matrix.category }}_${{ matrix.arch }}.zip
          asset_name: r-type_${{ matrix.category }}_${{ matrix.arch }}.zip
          asset_content_type: application/zip